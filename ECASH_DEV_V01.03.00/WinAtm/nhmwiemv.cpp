// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "nhmwiemv.h"

/////////////////////////////////////////////////////////////////////////////
// CNHMwiEmv

IMPLEMENT_DYNCREATE(CNHMwiEmv, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CNHMwiEmv properties

/////////////////////////////////////////////////////////////////////////////
// CNHMwiEmv operations

CString CNHMwiEmv::TestMethod(LPCTSTR szParam1, LPCTSTR szParam2, LPCTSTR szParam3)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		szParam1, szParam2, szParam3);
	return result;
}

void CNHMwiEmv::ProcSetDeviceEvent(LPCTSTR szDeviceName, LPCTSTR szEventName, LPCTSTR szEventValue)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 szDeviceName, szEventName, szEventValue);
}

void CNHMwiEmv::ProcSetDeviceStatus(LPCTSTR szDeviceName, LPCTSTR szProperty, LPCTSTR szStatus)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 szDeviceName, szProperty, szStatus);
}

long CNHMwiEmv::McuInitialize()
{
	long result;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CNHMwiEmv::McuDeinitialize()
{
	long result;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

CString CNHMwiEmv::CheckDeviceAction(long nDevID, long nWaitSec)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		nDevID, nWaitSec);
	return result;
}

long CNHMwiEmv::ScanDeviceAction(long nDevID, long nWaitSec, long nEventKind)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nDevID, nWaitSec, nEventKind);
	return result;
}

long CNHMwiEmv::GetErrorDevice(long nDevID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nDevID);
	return result;
}

long CNHMwiEmv::GetTimeoutDevice(long nDevID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nDevID);
	return result;
}

CString CNHMwiEmv::McuGetICData()
{
	CString result;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

long CNHMwiEmv::McuICEntryEnable(long nWaitSec)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nWaitSec);
	return result;
}

long CNHMwiEmv::McuICEntryDisable()
{
	long result;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CNHMwiEmv::McuICSendData(long ProtocolID, LPCTSTR szSendData, long nWaitSec)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_I4;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		ProtocolID, szSendData, nWaitSec);
	return result;
}

long CNHMwiEmv::McuICChipInitialize()
{
	long result;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CNHMwiEmv::ClearEventDevice(long nDevID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nDevID);
	return result;
}

long CNHMwiEmv::ClearStatusDevice(long nDevID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nDevID);
	return result;
}

long CNHMwiEmv::GetEventDevice(long nDevID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nDevID);
	return result;
}

long CNHMwiEmv::GetStatusDevice(long nDevID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nDevID);
	return result;
}

long CNHMwiEmv::EMV_SystemInitial()
{
	long result;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CNHMwiEmv::EMV_Sel_BuildCandidateApp()
{
	long result;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CNHMwiEmv::EMV_Sel_RemakeCandidateList()
{
	long result;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CNHMwiEmv::EMV_Sel_GetAppList(BSTR* AppList)
{
	long result;
	static BYTE parms[] =
		VTS_PBSTR;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		AppList);
	return result;
}

long CNHMwiEmv::EMV_Sel_FinalAppSelection(long iSelApp)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		iSelApp);
	return result;
}

long CNHMwiEmv::EMV_InitAppProcess(LPCTSTR TrProcCode, LPCTSTR TrAmount, LPCTSTR TrDateTime, long TrSerialCnt)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_I4;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		TrProcCode, TrAmount, TrDateTime, TrSerialCnt);
	return result;
}

long CNHMwiEmv::EMV_ReadAppData()
{
	long result;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CNHMwiEmv::EMV_OffDataAuth()
{
	long result;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CNHMwiEmv::EMV_ProcRestriction()
{
	long result;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CNHMwiEmv::EMV_CardholderVerify1(LPCTSTR EncPinData)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		EncPinData);
	return result;
}

long CNHMwiEmv::EMV_TerminalRiskMgmt()
{
	long result;
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CNHMwiEmv::EMV_ActionAnalysis(BSTR* CardRslt)
{
	long result;
	static BYTE parms[] =
		VTS_PBSTR;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		CardRslt);
	return result;
}

long CNHMwiEmv::EMV_CompleteProcess()
{
	long result;
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CNHMwiEmv::EMV_TransCloseProcess()
{
	long result;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CNHMwiEmv::EMV_OnlineApproval(LPCTSTR ResponseCd, long ARPCLen, LPCTSTR ARPCData, long IsuScriptLen, LPCTSTR IsuScriptData)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_BSTR VTS_I4 VTS_BSTR;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		ResponseCd, ARPCLen, ARPCData, IsuScriptLen, IsuScriptData);
	return result;
}

long CNHMwiEmv::EMV_DefaultApproval()
{
	long result;
	InvokeHelper(0x22, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

CString CNHMwiEmv::EMV_GetVal(long Val_Id)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		Val_Id);
	return result;
}

CString CNHMwiEmv::EMV_GetTlvVal(long TagID)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		TagID);
	return result;
}

CString CNHMwiEmv::EMV_GetVData(long Val_Id)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		Val_Id);
	return result;
}

CString CNHMwiEmv::EMV_GetEmvHostData(long nType)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x26, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		nType);
	return result;
}

long CNHMwiEmv::EMV_SetTranData(long BitID, LPCTSTR TranData)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x27, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BitID, TranData);
	return result;
}

long CNHMwiEmv::EMV_OnlineApproval2(LPCTSTR ResponseCd, long ARPCLen, LPCTSTR ARPCData, long IsuScriptLen, LPCTSTR IsuScriptData)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_BSTR VTS_I4 VTS_BSTR;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		ResponseCd, ARPCLen, ARPCData, IsuScriptLen, IsuScriptData);
	return result;
}

long CNHMwiEmv::EMV_TlvStoreVal(long nTid, LPCTSTR strVal)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nTid, strVal);
	return result;
}

long CNHMwiEmv::EMV_SetKernelType(long nType)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nType);
	return result;
}

long CNHMwiEmv::EMV_Sel_SetOnlyOneAID(LPCTSTR strYN)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		strYN);
	return result;
}

long CNHMwiEmv::EMV_Sel_GetAppListEx(BSTR* AppList)
{
	long result;
	static BYTE parms[] =
		VTS_PBSTR;
	InvokeHelper(0x2c, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		AppList);
	return result;
}

long CNHMwiEmv::EMV_SetKernelLogPath(LPCTSTR PathName)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2d, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		PathName);
	return result;
}

long CNHMwiEmv::EMV_TerminalActionAnalysis(BSTR* TerminalCID)
{
	long result;
	static BYTE parms[] =
		VTS_PBSTR;
	InvokeHelper(0x2e, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		TerminalCID);
	return result;
}

long CNHMwiEmv::EMV_CardActionAnalysis(BSTR* OnlineFlag)
{
	long result;
	static BYTE parms[] =
		VTS_PBSTR;
	InvokeHelper(0x2f, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		OnlineFlag);
	return result;
}

void CNHMwiEmv::EMV_Initial()
{
	InvokeHelper(0x30, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CNHMwiEmv::EMV_OnlineApproval3(LPCTSTR ResponseCd, long ARPCLen, LPCTSTR ARPCData, long IsuScriptLen, LPCTSTR IsuScriptData, LPCTSTR AcquirerCID)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_BSTR VTS_I4 VTS_BSTR VTS_BSTR;
	InvokeHelper(0x31, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		ResponseCd, ARPCLen, ARPCData, IsuScriptLen, IsuScriptData, AcquirerCID);
	return result;
}

void CNHMwiEmv::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
