// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "nhguros.h"

/////////////////////////////////////////////////////////////////////////////
// CNHGuros

IMPLEMENT_DYNCREATE(CNHGuros, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CNHGuros properties

CString CNHGuros::GetGiroCode()
{
	CString result;
	GetProperty(0x1, VT_BSTR, (void*)&result);
	return result;
}

void CNHGuros::SetGiroCode(LPCTSTR propVal)
{
	SetProperty(0x1, VT_BSTR, propVal);
}

CString CNHGuros::GetMoneyCode()
{
	CString result;
	GetProperty(0x2, VT_BSTR, (void*)&result);
	return result;
}

void CNHGuros::SetMoneyCode(LPCTSTR propVal)
{
	SetProperty(0x2, VT_BSTR, propVal);
}

CString CNHGuros::GetChargeCode()
{
	CString result;
	GetProperty(0x3, VT_BSTR, (void*)&result);
	return result;
}

void CNHGuros::SetChargeCode(LPCTSTR propVal)
{
	SetProperty(0x3, VT_BSTR, propVal);
}

CString CNHGuros::GetGiroOrganCode()
{
	CString result;
	GetProperty(0x4, VT_BSTR, (void*)&result);
	return result;
}

void CNHGuros::SetGiroOrganCode(LPCTSTR propVal)
{
	SetProperty(0x4, VT_BSTR, propVal);
}

CString CNHGuros::GetPayerNo()
{
	CString result;
	GetProperty(0x5, VT_BSTR, (void*)&result);
	return result;
}

void CNHGuros::SetPayerNo(LPCTSTR propVal)
{
	SetProperty(0x5, VT_BSTR, propVal);
}

CString CNHGuros::GetImageCode()
{
	CString result;
	GetProperty(0x6, VT_BSTR, (void*)&result);
	return result;
}

void CNHGuros::SetImageCode(LPCTSTR propVal)
{
	SetProperty(0x6, VT_BSTR, propVal);
}

CString CNHGuros::GetTranAmount()
{
	CString result;
	GetProperty(0x7, VT_BSTR, (void*)&result);
	return result;
}

void CNHGuros::SetTranAmount(LPCTSTR propVal)
{
	SetProperty(0x7, VT_BSTR, propVal);
}

CString CNHGuros::GetPayTerm()
{
	CString result;
	GetProperty(0x8, VT_BSTR, (void*)&result);
	return result;
}

void CNHGuros::SetPayTerm(LPCTSTR propVal)
{
	SetProperty(0x8, VT_BSTR, propVal);
}

CString CNHGuros::GetOcrName()
{
	CString result;
	GetProperty(0x9, VT_BSTR, (void*)&result);
	return result;
}

void CNHGuros::SetOcrName(LPCTSTR propVal)
{
	SetProperty(0x9, VT_BSTR, propVal);
}

CString CNHGuros::GetEditTranAmount()
{
	CString result;
	GetProperty(0xa, VT_BSTR, (void*)&result);
	return result;
}

void CNHGuros::SetEditTranAmount(LPCTSTR propVal)
{
	SetProperty(0xa, VT_BSTR, propVal);
}

CString CNHGuros::GetCity()
{
	CString result;
	GetProperty(0xb, VT_BSTR, (void*)&result);
	return result;
}

void CNHGuros::SetCity(LPCTSTR propVal)
{
	SetProperty(0xb, VT_BSTR, propVal);
}

CString CNHGuros::GetTax()
{
	CString result;
	GetProperty(0xc, VT_BSTR, (void*)&result);
	return result;
}

void CNHGuros::SetTax(LPCTSTR propVal)
{
	SetProperty(0xc, VT_BSTR, propVal);
}

CString CNHGuros::GetWater()
{
	CString result;
	GetProperty(0xd, VT_BSTR, (void*)&result);
	return result;
}

void CNHGuros::SetWater(LPCTSTR propVal)
{
	SetProperty(0xd, VT_BSTR, propVal);
}

CString CNHGuros::GetScreenAccount()
{
	CString result;
	GetProperty(0xe, VT_BSTR, (void*)&result);
	return result;
}

void CNHGuros::SetScreenAccount(LPCTSTR propVal)
{
	SetProperty(0xe, VT_BSTR, propVal);
}

CString CNHGuros::GetOcrStream()
{
	CString result;
	GetProperty(0xf, VT_BSTR, (void*)&result);
	return result;
}

void CNHGuros::SetOcrStream(LPCTSTR propVal)
{
	SetProperty(0xf, VT_BSTR, propVal);
}

BOOL CNHGuros::GetBCheckDate()
{
	BOOL result;
	GetProperty(0x10, VT_BOOL, (void*)&result);
	return result;
}

void CNHGuros::SetBCheckDate(BOOL propVal)
{
	SetProperty(0x10, VT_BOOL, propVal);
}

CString CNHGuros::GetZoneCode()
{
	CString result;
	GetProperty(0x11, VT_BSTR, (void*)&result);
	return result;
}

void CNHGuros::SetZoneCode(LPCTSTR propVal)
{
	SetProperty(0x11, VT_BSTR, propVal);
}

CString CNHGuros::GetZoneCodeMsg()
{
	CString result;
	GetProperty(0x12, VT_BSTR, (void*)&result);
	return result;
}

void CNHGuros::SetZoneCodeMsg(LPCTSTR propVal)
{
	SetProperty(0x12, VT_BSTR, propVal);
}

CString CNHGuros::GetRejectReason()
{
	CString result;
	GetProperty(0x13, VT_BSTR, (void*)&result);
	return result;
}

void CNHGuros::SetRejectReason(LPCTSTR propVal)
{
	SetProperty(0x13, VT_BSTR, propVal);
}

BOOL CNHGuros::GetBrokenImage()
{
	BOOL result;
	GetProperty(0x14, VT_BOOL, (void*)&result);
	return result;
}

void CNHGuros::SetBrokenImage(BOOL propVal)
{
	SetProperty(0x14, VT_BOOL, propVal);
}

CString CNHGuros::GetRejectReasonCode()
{
	CString result;
	GetProperty(0x15, VT_BSTR, (void*)&result);
	return result;
}

void CNHGuros::SetRejectReasonCode(LPCTSTR propVal)
{
	SetProperty(0x15, VT_BSTR, propVal);
}

BOOL CNHGuros::GetCheckDigitPermit()
{
	BOOL result;
	GetProperty(0x16, VT_BOOL, (void*)&result);
	return result;
}

void CNHGuros::SetCheckDigitPermit(BOOL propVal)
{
	SetProperty(0x16, VT_BOOL, propVal);
}

BOOL CNHGuros::GetCheckDigitBreak()
{
	BOOL result;
	GetProperty(0x17, VT_BOOL, (void*)&result);
	return result;
}

void CNHGuros::SetCheckDigitBreak(BOOL propVal)
{
	SetProperty(0x17, VT_BOOL, propVal);
}

BOOL CNHGuros::GetSeoulGiro()
{
	BOOL result;
	GetProperty(0x18, VT_BOOL, (void*)&result);
	return result;
}

void CNHGuros::SetSeoulGiro(BOOL propVal)
{
	SetProperty(0x18, VT_BOOL, propVal);
}

CString CNHGuros::GetVersion()
{
	CString result;
	GetProperty(0x19, VT_BSTR, (void*)&result);
	return result;
}

void CNHGuros::SetVersion(LPCTSTR propVal)
{
	SetProperty(0x19, VT_BSTR, propVal);
}

BOOL CNHGuros::GetPusanGiro()
{
	BOOL result;
	GetProperty(0x1a, VT_BOOL, (void*)&result);
	return result;
}

void CNHGuros::SetPusanGiro(BOOL propVal)
{
	SetProperty(0x1a, VT_BOOL, propVal);
}

CString CNHGuros::GetCurrentJournalPath()
{
	CString result;
	GetProperty(0x1b, VT_BSTR, (void*)&result);
	return result;
}

void CNHGuros::SetCurrentJournalPath(LPCTSTR propVal)
{
	SetProperty(0x1b, VT_BSTR, propVal);
}

CString CNHGuros::GetBackupPath()
{
	CString result;
	GetProperty(0x1c, VT_BSTR, (void*)&result);
	return result;
}

void CNHGuros::SetBackupPath(LPCTSTR propVal)
{
	SetProperty(0x1c, VT_BSTR, propVal);
}

BOOL CNHGuros::GetOurRange()
{
	BOOL result;
	GetProperty(0x1d, VT_BOOL, (void*)&result);
	return result;
}

void CNHGuros::SetOurRange(BOOL propVal)
{
	SetProperty(0x1d, VT_BOOL, propVal);
}

CString CNHGuros::GetAccountItem()
{
	CString result;
	GetProperty(0x1e, VT_BSTR, (void*)&result);
	return result;
}

void CNHGuros::SetAccountItem(LPCTSTR propVal)
{
	SetProperty(0x1e, VT_BSTR, propVal);
}

CString CNHGuros::GetBeforeAfter()
{
	CString result;
	GetProperty(0x1f, VT_BSTR, (void*)&result);
	return result;
}

void CNHGuros::SetBeforeAfter(LPCTSTR propVal)
{
	SetProperty(0x1f, VT_BSTR, propVal);
}

CString CNHGuros::GetPayTermOver()
{
	CString result;
	GetProperty(0x20, VT_BSTR, (void*)&result);
	return result;
}

void CNHGuros::SetPayTermOver(LPCTSTR propVal)
{
	SetProperty(0x20, VT_BSTR, propVal);
}

CString CNHGuros::GetTranAmountOver()
{
	CString result;
	GetProperty(0x21, VT_BSTR, (void*)&result);
	return result;
}

void CNHGuros::SetTranAmountOver(LPCTSTR propVal)
{
	SetProperty(0x21, VT_BSTR, propVal);
}

CString CNHGuros::GetAboutRange()
{
	CString result;
	GetProperty(0x22, VT_BSTR, (void*)&result);
	return result;
}

void CNHGuros::SetAboutRange(LPCTSTR propVal)
{
	SetProperty(0x22, VT_BSTR, propVal);
}

long CNHGuros::GetNotAccept()
{
	long result;
	GetProperty(0x23, VT_I4, (void*)&result);
	return result;
}

void CNHGuros::SetNotAccept(long propVal)
{
	SetProperty(0x23, VT_I4, propVal);
}

long CNHGuros::GetCheckCDResult()
{
	long result;
	GetProperty(0x24, VT_I4, (void*)&result);
	return result;
}

void CNHGuros::SetCheckCDResult(long propVal)
{
	SetProperty(0x24, VT_I4, propVal);
}

BOOL CNHGuros::GetDeaguGiro()
{
	BOOL result;
	GetProperty(0x25, VT_BOOL, (void*)&result);
	return result;
}

void CNHGuros::SetDeaguGiro(BOOL propVal)
{
	SetProperty(0x25, VT_BOOL, propVal);
}

CString CNHGuros::GetFloatType()
{
	CString result;
	GetProperty(0x26, VT_BSTR, (void*)&result);
	return result;
}

void CNHGuros::SetFloatType(LPCTSTR propVal)
{
	SetProperty(0x26, VT_BSTR, propVal);
}

CString CNHGuros::GetEtcCode()
{
	CString result;
	GetProperty(0x27, VT_BSTR, (void*)&result);
	return result;
}

void CNHGuros::SetEtcCode(LPCTSTR propVal)
{
	SetProperty(0x27, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CNHGuros operations

BOOL CNHGuros::SetGiroData(LPCTSTR m_GiroData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		m_GiroData);
	return result;
}

CString CNHGuros::AddString(LPCTSTR src, LPCTSTR dest, long slen, LPCTSTR dBuff)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_I4 VTS_BSTR;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		src, dest, slen, dBuff);
	return result;
}

long CNHGuros::ImageCopy(LPCTSTR sourcename, LPCTSTR destinationName)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		sourcename, destinationName);
	return result;
}

CString CNHGuros::EditAmount(LPCTSTR src)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		src);
	return result;
}

CString CNHGuros::AddMonth(LPCTSTR strDate)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2c, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		strDate);
	return result;
}

long CNHGuros::CardDataCheck(LPCTSTR Iso2Str, LPCTSTR Iso3Str)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x2d, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Iso2Str, Iso3Str);
	return result;
}

long CNHGuros::McrDataCheck(LPCTSTR Iso2Str, LPCTSTR Iso3Str)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x2e, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Iso2Str, Iso3Str);
	return result;
}

long CNHGuros::PassbookDataCheck(LPCTSTR PbStr)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2f, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		PbStr);
	return result;
}

void CNHGuros::StreamDump(LPCTSTR HexaStr, long slen)
{
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x30, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 HexaStr, slen);
}

void CNHGuros::PinNumberSet(LPCTSTR pinNumber)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x31, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pinNumber);
}

void CNHGuros::InitializeAp()
{
	InvokeHelper(0x32, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CNHGuros::PhoneNoSet(LPCTSTR phone)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x33, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 phone);
}

CString CNHGuros::makeTransmit()
{
	CString result;
	InvokeHelper(0x34, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CNHGuros::MicrAmountSet(LPCTSTR micrAmount)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x35, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 micrAmount);
}

void CNHGuros::BrokenImageAmountSet(LPCTSTR nAmount)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x36, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nAmount);
}

BOOL CNHGuros::GetNetStatus()
{
	BOOL result;
	InvokeHelper(0x37, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

CString CNHGuros::GetCurrentDateTime()
{
	CString result;
	InvokeHelper(0x38, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString CNHGuros::GetCurrentEJDir()
{
	CString result;
	InvokeHelper(0x39, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString CNHGuros::makeHanaTransmit()
{
	CString result;
	InvokeHelper(0x3a, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString CNHGuros::SQLSelect(short ObjKind, LPCTSTR Code)
{
	CString result;
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x3b, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		ObjKind, Code);
	return result;
}

BOOL CNHGuros::SQLInsert(short ObjKind, LPCTSTR Code, LPCTSTR Name)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_BSTR VTS_BSTR;
	InvokeHelper(0x3c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ObjKind, Code, Name);
	return result;
}

BOOL CNHGuros::SQLDelete(short ObjKind, LPCTSTR Code)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x3d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ObjKind, Code);
	return result;
}

BOOL CNHGuros::SQLUpdate(short ObjKind, LPCTSTR Code, LPCTSTR Name)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_BSTR VTS_BSTR;
	InvokeHelper(0x3e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ObjKind, Code, Name);
	return result;
}

long CNHGuros::makeJournalPath(LPCTSTR journalRootDir)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3f, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		journalRootDir);
	return result;
}

CString CNHGuros::makeBackUpPath(LPCTSTR backupRootDir)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x40, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		backupRootDir);
	return result;
}

CString CNHGuros::FindOrganCode(LPCTSTR OrganCode)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x41, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		OrganCode);
	return result;
}

long CNHGuros::DeleteImgFile(LPCTSTR szFilename)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x42, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szFilename);
	return result;
}

long CNHGuros::SetRegInfo(LPCTSTR szSetKeyName, LPCTSTR szSetDataName, LPCTSTR szSetDataValue)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x43, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szSetKeyName, szSetDataName, szSetDataValue);
	return result;
}

CString CNHGuros::GetRegInfo(LPCTSTR ValueName, LPCTSTR PathName)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x44, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		ValueName, PathName);
	return result;
}

CString CNHGuros::SelectedLocation()
{
	CString result;
	InvokeHelper(0x45, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString CNHGuros::ReadSelectedLocation()
{
	CString result;
	InvokeHelper(0x46, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL CNHGuros::CheckFileSize(LPCTSTR strFileName, long IMaxSize)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x47, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strFileName, IMaxSize);
	return result;
}
